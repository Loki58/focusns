/*#########################################################################
 * FocusSNS MySQL 数据库初始化脚本
 *
 * @author gavin
 * @since 2.0.0
 *#########################################################################*/


/**
 * Core
 */
-- Table TB_PROJECT_USER
DROP TABLE IF EXISTS TB_PROJECT_USER;
CREATE TABLE TB_PROJECT_USER (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
	  `USERNAME` VARCHAR(100) NOT NULL ,
	  `PASSWORD` VARCHAR(100) NOT NULL ,
    `NICKNAME` VARCHAR(100) NOT NULL ,
    `EMAIL` VARCHAR(100) NOT NULL ,
    `ENABLED` BOOLEAN DEFAULT FALSE ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
  	`PROJECT_ID` BIGINT ,
    PRIMARY KEY (`ID`) ,
    UNIQUE INDEX `EMAIL_UNIQUE` (`EMAIL`)
);

-- Table TB_PROJECT_ROLE
DROP TABLE IF EXISTS TB_PROJECT_ROLE;
CREATE TABLE TB_PROJECT_ROLE (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `LABEL` VARCHAR(100) NOT NULL ,
    `LEVEL` INT NOT NULL ,
    `PROJECT_ID` BIGINT,
    PRIMARY KEY (`ID`)
);

-- Table TB_PROJECT_AUTHORITY
DROP TABLE IF EXISTS TB_PROJECT_AUTHORITY;
CREATE TABLE TB_PROJECT_AUTHORITY (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `CODE` VARCHAR(100) NOT NULL ,
    `DESCRIPTION` VARCHAR(255) NOT NULL ,
     UNIQUE INDEX `CODE_UNIQUE` (`CODE`) ,
     PRIMARY KEY (`ID`)
);

-- Table TB_PROJECT_MEMBER
DROP TABLE IF EXISTS TB_PROJECT_MEMBER;
CREATE TABLE TB_PROJECT_MEMBER (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `PROJECT_USER_ID` BIGINT NOT NULL ,
    `PROJECT_ROLE_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL,
    `MODIFIED_BY_ID` BIGINT NOT NULL,
    `CREATED_AT` TIMESTAMP NOT NULL ,
	  `MODIFIED_AT` TIMESTAMP NOT NULL ,
    PRIMARY KEY (`ID`)
);

-- Table TB_PROJECT_PERMISSION
DROP TABLE IF EXISTS TB_PROJECT_PERMISSION;
CREATE TABLE TB_PROJECT_PERMISSION (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `PROJECT_ROLE_ID` BIGINT NOT NULL ,
    `PROJECT_AUTHORITY_ID` BIGINT NOT NULL ,
    `ENABLED` BOOLEAN DEFAULT FALSE ,
    PRIMARY KEY (`ID`)
);

-- Table TB_PROJECT
DROP TABLE IF EXISTS TB_PROJECT;
CREATE TABLE TB_PROJECT (
	  `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `CODE` VARCHAR(100) NOT NULL ,
    `TITLE` VARCHAR(100) NOT NULL ,
    `DESCRIPTION` VARCHAR(255) NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `MODIFIED_AT` TIMESTAMP NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `MODIFIED_BY_ID` BIGINT NOT NULL ,
    `CATEGORY_ID` BIGINT NOT NULL ,
    `PRIVATE` BOOLEAN DEFAULT FALSE ,
    PRIMARY KEY (`ID`) ,
    UNIQUE INDEX `CODE_UNIQUE` (`CODE`)
);

-- Table TB_PROJECT_CATEGORY
DROP TABLE IF EXISTS TB_PROJECT_CATEGORY;
CREATE TABLE TB_PROJECT_CATEGORY (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `CODE` VARCHAR(100) NOT NULL ,
    `LABEL` VARCHAR(100) NOT NULL ,
    `ENABLED` BOOLEAN DEFAULT TRUE ,
    `PRIVATE` BOOLEAN DEFAULT FALSE ,
    `LEVEL` INT DEFAULT 0 ,
    PRIMARY KEY (`ID`) ,
    UNIQUE INDEX `CODE_UNIQUE` (`CODE`)
);

-- Table TB_PROJECT_FEATURE
DROP TABLE IF EXISTS TB_PROJECT_FEATURE;
CREATE TABLE TB_PROJECT_FEATURE (
    `ID` INT NOT NULL AUTO_INCREMENT ,
    `CODE` VARCHAR(100) NOT NULL ,
    `LABEL` VARCHAR(100) NOT NULL ,
    `LEVEL` INT NOT NULL DEFAULT 0,
    `ENABLED` BOOLEAN NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

-- Table TB_PROJECT_ATTRIBUTE
DROP TABLE IF EXISTS TB_PROJECT_ATTRIBUTE;
CREATE TABLE TB_PROJECT_ATTRIBUTE (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `NAME` VARCHAR(50) NOT NULL ,
    `VALUE` VARCHAR(255) NOT NULL ,
    `TYPE` VARCHAR(50) NOT NULL DEFAULT "" ,
    `LEVEL` INT DEFAULT 0 ,
    `PROJECT_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

-- Table TB_PROJECT_HISTORY
DROP TABLE IF EXISTS TB_PROJECT_HISTORY;
CREATE TABLE TB_PROJECT_HISTORY (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `CONTENT` VARCHAR(255) NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `PARENT_ID` BIGINT ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `TARGET_ID` BIGINT NOT NULL ,
    `TARGET_TYPE` VARCHAR(255) NOT NULL ,
	  PRIMARY KEY (`ID`)
);

-- Table TB_PROJECT_LINK
DROP TABLE IF EXISTS TB_PROJECT_LINK;
CREATE TABLE TB_PROJECT_LINK (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `FROM_PROJECT_ID` BIGINT NOT NULL ,
    `TO_PROJECT_ID` BIGINT NOT NULL ,
    `MUTUAL` BOOLEAN DEFAULT FALSE ,
	  PRIMARY KEY (`ID`)
);

-- Alert Table TB_PROJECT_USER
ALTER TABLE TB_PROJECT_USER ADD CONSTRAINT FK_PROJECT_ID_TB_PROJECT_USER
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT_ROLE
ALTER TABLE TB_PROJECT_ROLE ADD CONSTRAINT FK_PROJECT_ID_TB_PROJECT_ROLE
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT_MEMBER
ALTER TABLE TB_PROJECT_MEMBER ADD CONSTRAINT FK_PROJECT_ID_TB_PROJECT_MEMBER
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_MEMBER ADD CONSTRAINT FK_PROJECT_USER_ID_TB_PROJECT_MEMBER
    FOREIGN KEY(`PROJECT_USER_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_MEMBER ADD CONSTRAINT FK_PROJECT_ROLE_ID_TB_PROJECT_MEMBER
    FOREIGN KEY(`PROJECT_ROLE_ID`)
    REFERENCES TB_PROJECT_ROLE(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_MEMBER ADD CONSTRAINT FK_CREATED_BY_ID_TB_PROJECT_MEMBER
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_MEMBER ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_PROJECT_MEMBER
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT_PERMISSION
ALTER TABLE TB_PROJECT_PERMISSION ADD CONSTRAINT FK_PROJECT_ID_TB_PROJECT_PERMISSION
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_PERMISSION ADD CONSTRAINT FK_PROJECT_ROLE_ID_TB_PROJECT_PERMISSION
    FOREIGN KEY(`PROJECT_ROLE_ID`)
    REFERENCES TB_PROJECT_ROLE(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_PERMISSION ADD CONSTRAINT FK_PROJECT_AUTHORITY_ID_TB_PROJECT_PERMISSION
    FOREIGN KEY(`PROJECT_AUTHORITY_ID`)
    REFERENCES TB_PROJECT_AUTHORITY(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT
ALTER TABLE TB_PROJECT ADD CONSTRAINT FK_CREATED_BY_ID_TB_PROJECT
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_PROJECT
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT ADD CONSTRAINT FK_CATEGORY_ID_TB_PROJECT
    FOREIGN KEY(`CATEGORY_ID`)
    REFERENCES TB_PROJECT_CATEGORY(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT_FEATURE
ALTER TABLE TB_PROJECT_FEATURE ADD CONSTRAINT FK_PROJECT_ID_TB_PROJECT_FEATURE
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT_ATTRIBUTE
ALTER TABLE TB_PROJECT_ATTRIBUTE ADD CONSTRAINT FK_PROJECT_ID_TB_PROJECT_ATTRIBUTE
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT_HISTORY
ALTER TABLE TB_PROJECT_HISTORY ADD CONSTRAINT FK_PARENT_ID_TB_PROJECT_HISTORY
    FOREIGN KEY(`PARENT_ID`)
    REFERENCES TB_PROJECT_HISTORY(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_HISTORY ADD CONSTRAINT FK_PROJECT_ID_TB_PROJECT_HISTORY
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_HISTORY ADD CONSTRAINT FK_CREATED_BY_ID_TB_PROJECT_HISTORY
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- Alert Table TB_PROJECT_LINK
ALTER TABLE TB_PROJECT_LINK ADD CONSTRAINT FK_FROM_PROJECT_ID_TB_PROJECT_LINK
    FOREIGN KEY(`FROM_PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_PROJECT_LINK ADD CONSTRAINT FK_TO_PROJECT_ID_TB_PROJECT_LINK
    FOREIGN KEY(`TO_PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
/**
 * Blog
 */
DROP TABLE IF EXISTS TB_BLOG_CATEGORY;
CREATE TABLE TB_BLOG_CATEGORY (
	`ID` BIGINT NOT NULL AUTO_INCREMENT ,
	`LABEL` VARCHAR(100) NOT NULL ,
	`CREATED_AT` TIMESTAMP NOT NULL ,
    `PROJECT_ID` BIGINT,
    `CREATED_BY_ID` BIGINT,
	PRIMARY KEY (`ID`)
);

DROP TABLE IF EXISTS TB_BLOG_POST;
CREATE TABLE TB_BLOG_POST (
	`ID` BIGINT NOT NULL AUTO_INCREMENT ,
	`TITLE` VARCHAR(100) NOT NULL ,
	`SUMMARY` TEXT NOT NULL ,
    `CONTENT` TEXT NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
	`MODIFIED_AT` TIMESTAMP NOT NULL ,
    `CATEGORY_ID` BIGINT ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `MODIFIED_BY_ID` BIGINT NOT NULL ,
    `PROJECT_ID` BIGINT,
	PRIMARY KEY (`ID`)
);

DROP TABLE IF EXISTS TB_BLOG_COMMENT;
CREATE TABLE TB_BLOG_COMMENT (
	  `ID` BIGINT NOT NULL AUTO_INCREMENT ,
	  `TITLE` VARCHAR(100) NOT NULL ,
    `CONTENT` TEXT NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
	  `MODIFIED_AT` TIMESTAMP NOT NULL ,
    `POST_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
	  PRIMARY KEY (`ID`)
);

-- TB_BLOG_CATEGORY
ALTER TABLE TB_BLOG_CATEGORY ADD CONSTRAINT FK_PROJECT_ID_TB_BLOG_CATEGORY
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_BLOG_CATEGORY ADD CONSTRAINT FK_CREATED_BY_ID_TB_BLOG_CATEGORY
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- TB_BLOG_POST
ALTER TABLE TB_BLOG_POST ADD CONSTRAINT FK_CATEGORY_ID_TB_BLOG_POST
    FOREIGN KEY(`CATEGORY_ID`)
    REFERENCES TB_BLOG_CATEGORY(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_BLOG_POST ADD CONSTRAINT FK_CREATED_BY_ID_TB_BLOG_POST
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
ALTER TABLE TB_BLOG_POST ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_BLOG_POST
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_BLOG_POST ADD CONSTRAINT FK_PROJECT_ID_TB_BLOG_POST
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- TB_BLOG_COMMENT
ALTER TABLE TB_BLOG_COMMENT ADD CONSTRAINT FK_POST_ID_TB_BLOG_COMMENT
    FOREIGN KEY(`POST_ID`)
    REFERENCES TB_BLOG_POST(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_BLOG_COMMENT ADD CONSTRAINT FK_CREATED_BY_ID_TB_BLOG_COMMENT
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
/**
 * Forum
 */
DROP TABLE IF EXISTS TB_FORUM_CATEGORY;
CREATE TABLE TB_FORUM_CATEGORY(
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `LABEL` VARCHAR(100) NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

DROP TABLE IF EXISTS TB_FORUM_TOPIC;
CREATE TABLE TB_FORUM_TOPIC (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `TITLE` VARCHAR(250) NOT NULL ,
    `CONTENT` TEXT NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `MODIFIED_AT` TIMESTAMP NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CATEGORY_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `MODIFIED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

DROP TABLE IF EXISTS TB_FORUM_POST;
CREATE TABLE TB_FORUM_POST (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `TITLE` VARCHAR(250) NOT NULL ,
    `CONTENT` TEXT NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `MODIFIED_AT` TIMESTAMP NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `TOPIC_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `MODIFIED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

-- TB_FORUM_CATEGORY
ALTER TABLE TB_FORUM_CATEGORY ADD CONSTRAINT FK_PROJECT_ID_TB_FORUM_CATEGORY
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_FORUM_CATEGORY ADD CONSTRAINT FK_CREATED_BY_ID_TB_FORUM_CATEGORY
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- TB_FORUM_TOPIC
ALTER TABLE TB_FORUM_TOPIC ADD CONSTRAINT FK_PROJECT_ID_TB_FORUM_TOPIC
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_FORUM_TOPIC ADD CONSTRAINT FK_CATEGORY_ID_TB_FORUM_TOPIC
    FOREIGN KEY(`CATEGORY_ID`)
    REFERENCES TB_FORUM_CATEGORY(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_FORUM_TOPIC ADD CONSTRAINT FK_CREATED_BY_ID_TB_FORUM_TOPIC
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_FORUM_TOPIC ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_FORUM_TOPIC
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- TB_FORUM_POST
ALTER TABLE TB_FORUM_POST ADD CONSTRAINT FK_PROJECT_ID_TB_FORUM_POST
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_FORUM_POST ADD CONSTRAINT FK_TOPIC_ID_TB_FORUM_POST
    FOREIGN KEY(`TOPIC_ID`)
    REFERENCES TB_FORUM_TOPIC(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_FORUM_POST ADD CONSTRAINT FK_CREATED_BY_ID_TB_FORUM_POST
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_FORUM_POST ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_FORUM_POST
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;
/**
 * Event
 */
DROP TABLE IF EXISTS TB_EVENT_CATEGORY;
CREATE TABLE TB_EVENT_CATEGORY(
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `LABEL` VARCHAR(100) NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

DROP TABLE IF EXISTS TB_EVENT;
CREATE TABLE TB_EVENT(
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `TITLE` VARCHAR(250) NOT NULL ,
    `CONTENT` TEXT NOT NULL ,
    `LINK` VARCHAR(250),
    `BEGIN` TIMESTAMP NOT NULL ,
    `END` TIMESTAMP NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `MODIFIED_AT` TIMESTAMP NOT NULL ,
    `CATEGORY_ID` BIGINT NOT NULL,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `MODIFIED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

-- TB_EVENT_CATEGORY
ALTER TABLE TB_EVENT_CATEGORY ADD CONSTRAINT FK_PROJECT_ID_TB_EVENT_CATEGORY
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_EVENT_CATEGORY ADD CONSTRAINT FK_CREATED_BY_ID_TB_EVENT_CATEGORY
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- TB_EVENT
ALTER TABLE TB_EVENT ADD CONSTRAINT FK_CATEGORY_ID_TB_EVENT
    FOREIGN KEY(`CATEGORY_ID`)
    REFERENCES TB_EVENT_CATEGORY(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_EVENT ADD CONSTRAINT FK_PROJECT_ID_TB_EVENT
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_EVENT ADD CONSTRAINT FK_CREATED_BY_ID_TB_EVENT
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_EVENT ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_EVENT
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

/**
 * Photo
 */
DROP TABLE IF EXISTS TB_ALBUM;
CREATE TABLE TB_ALBUM(
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `LABEL` VARCHAR(100) NOT NULL ,
    `DESCRIPTION` VARCHAR(500) NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `MODIFIED_AT` TIMESTAMP NOT NULL ,
    `PHOTO_ID` BIGINT ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `MODIFIED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

DROP TABLE IF EXISTS TB_PHOTO;
CREATE TABLE TB_PHOTO(
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `ALBUM_ID` BIGINT NOT NULL ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

-- TB_PHOTO
ALTER TABLE TB_PHOTO ADD CONSTRAINT FK_ALBUM_ID_TB_PHOTO
    FOREIGN KEY(`ALBUM_ID`)
    REFERENCES TB_ALBUM(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_PHOTO ADD CONSTRAINT FK_PROJECT_ID_TB_PHOTO
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_PHOTO ADD CONSTRAINT FK_CREATED_BY_ID_TB_PHOTO
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

-- TB_ALBUM
ALTER TABLE TB_ALBUM ADD CONSTRAINT FK_PHOTO_ID_TB_ALBUM
    FOREIGN KEY(`PHOTO_ID`)
    REFERENCES TB_PHOTO(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_ALBUM ADD CONSTRAINT FK_PROJECT_ID_TB_ALBUM
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_ALBUM ADD CONSTRAINT FK_CREATED_BY_ID_TB_ALBUM
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_ALBUM ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_ALBUM
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

/**
 * Team
 */
DROP TABLE IF EXISTS TB_TEAM_MEMBER;
CREATE TABLE TB_TEAM_MEMBER (
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `MODIFIED_AT` TIMESTAMP NOT NULL ,
    `USER_ID` BIGINT NOT NULL ,
    `ROLE_ID` BIGINT NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `MODIFIED_BY_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

ALTER TABLE TB_TEAM_MEMBER ADD CONSTRAINT FK_USER_ID_TB_TEAM_MEMBER
    FOREIGN KEY(`USER_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_TEAM_MEMBER ADD CONSTRAINT FK_ROLE_ID_TB_TEAM_MEMBER
    FOREIGN KEY(`ROLE_ID`)
    REFERENCES TB_PROJECT_ROLE(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_TEAM_MEMBER ADD CONSTRAINT FK_PROJECT_ID_TB_TEAM_MEMBER
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_TEAM_MEMBER ADD CONSTRAINT FK_CREATED_BY_ID_TB_TEAM_MEMBER
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_TEAM_MEMBER ADD CONSTRAINT FK_MODIFIED_BY_ID_TB_TEAM_MEMBER
    FOREIGN KEY(`MODIFIED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

/**
 * Mesage
 */
DROP TABLE IF EXISTS TB_MESSAGE;
CREATE TABLE TB_MESSAGE(
    `ID` BIGINT NOT NULL AUTO_INCREMENT ,
    `TITLE` VARCHAR(250) NOT NULL ,
    `CONTENT` TEXT NOT NULL ,
    `READ_AT` TIMESTAMP,
    `CREATED_AT` TIMESTAMP NOT NULL ,
    `CREATED_BY_ID` BIGINT NOT NULL ,
    `PROJECT_ID` BIGINT NOT NULL ,
    `TO_PROJECT_ID` BIGINT NOT NULL ,
    PRIMARY KEY (`ID`)
);

-- TB_MESSAGE
ALTER TABLE TB_MESSAGE ADD CONSTRAINT FK_CREATED_BY_ID_TB_MESSAGE
    FOREIGN KEY(`CREATED_BY_ID`)
    REFERENCES TB_PROJECT_USER(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_MESSAGE ADD CONSTRAINT FK_PROJECT_ID_TB_MESSAGE
    FOREIGN KEY(`PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

ALTER TABLE TB_MESSAGE ADD CONSTRAINT FK_TO_PROJECT_ID_TB_MESSAGE
    FOREIGN KEY(`TO_PROJECT_ID`)
    REFERENCES TB_PROJECT(`ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

/**
 * Initial Data
 */
drop procedure if exists createProjectAuthorities;

delimiter //
create procedure createProjectAuthorities()
    begin
        insert into tb_project_authority(code, description)
            values('project-profile-view', '查看主页模块');
        insert into tb_project_authority(code, description)
            values('project-profile-edit', '查看主页模块');
        insert into tb_project_authority(code, description)
            values('project-blog-view', '查看日志模块');
        insert into tb_project_authority(code, description)
            values('project-blog-edit', '编辑日志模块');
        insert into tb_project_authority(code, description)
            values('project-photo-view', '查看相册模块');
        insert into tb_project_authority(code, description)
            values('project-photo-edit', '编辑相册模块');
        insert into tb_project_authority(code, description)
            values('project-admin-view', '查看管理模块');
        insert into tb_project_authority(code, description)
            values('project-admin-edit', '编辑管理模块');
    end //
delimiter ;

drop procedure if exists createProjectFeature;

delimiter //
create procedure createProjectFeatures(in _projectId bigint)
    begin
        insert into tb_project_feature (code, label, `level`, enabled, project_id)
            values('profile', '主页', 0, true, _projectId);
        insert into tb_project_feature (code, label, `level`, enabled, project_id)
            values('blog', '日志', 5, true, _projectId);
        insert into tb_project_feature (code, label, `level`, enabled, project_id)
            values('photo', '相册', 10, true, _projectId);
        insert into tb_project_feature (code, label, `level`, enabled, project_id)
            values('team', '好友', 15, true, _projectId);
        insert into tb_project_feature (code, label, `level`, enabled, project_id)
            values('msg', '消息', 20, true, _projectId);
        insert into tb_project_feature (code, label, `level`, enabled, project_id)
            values('admin', '管理', 25, true, _projectId);
    end //
delimiter ;

drop procedure if exists createProjectCategory;

delimiter //
create procedure createProjectCategory(in _code varchar(100),
                                       in _label varchar(100),
                                       out _categoryId bigint)
    begin
        # declare variables
        declare i_count int;
        set @v_code := _code;
        set @v_label := _label;
        #
        select count(*) into i_count from tb_project_category where code = @v_code;
        if i_count < 1 then
            insert into tb_project_category(code, label, enabled, private, `level`)
            values (_code, _label, true, false, 0);
        end if;
        # select categoryId
        select id into _categoryId from tb_project_category  where code = @v_code;
    end //
delimiter ;

drop procedure if exists init_db;

delimiter //
create procedure init_db()
    begin
        # declare variables
        declare userId, categoryId, projectId bigint;
        #
        call createProjectCategory('people', '成员', categoryId);
        #
        #insert into tb_project_user(username, password, email)
        #    values ('admin', 'e10adc3949ba59abbe56e057f20f883e', 'admin@focusns.org');

        #select id into userId from tb_project_user where username = 'admin';

        #insert into tb_project (code, title, description, CREATED_AT, MODIFIED_AT, CREATED_BY_ID, MODIFIED_BY_ID, category_id, private)
        #    values ('admin', 'Admin', 'This is admin!', now(), now(), userId, userId, categoryId, true);

        # select projectId
        #select id into projectId from tb_project where code = 'admin';
        # update user
        #update tb_project_user set project_id = projectId where id = userId;

        # create project features
        #call createProjectFeature(projectId);

        insert into tb_project_user(username, password, nickname, email, enabled, created_at)
            values ('test@focusns.org', 'e10adc3949ba59abbe56e057f20f883e', 'Test', 'test@focusns.org', true, now());
        # select userId
        select id into userId from tb_project_user where username = 'test@focusns.org';

        insert into tb_project (code, title, description, CREATED_AT, MODIFIED_AT, CREATED_BY_ID, MODIFIED_BY_ID, category_id, private)
            values ('test', 'Test', 'This is test!', now(), now(), userId, userId, categoryId, true);

        # select projectId
        select id into projectId from tb_project where code = 'test';
        # update user
        update tb_project_user set project_id = projectId where id = userId;

        # create project features
        call createProjectFeatures(projectId);
        # create project authorities
        call createProjectAuthorities();
    end //
delimiter ;

call init_db();